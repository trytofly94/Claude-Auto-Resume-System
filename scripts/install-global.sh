#!/usr/bin/env bash

# Claude Auto-Resume - Global Installation Script
# Installs claude-auto-resume as a globally accessible command
# Version: 2.0.0
# Issue: #88

set -euo pipefail

# ===============================================================================
# CONFIGURATION
# ===============================================================================

readonly SCRIPT_NAME="claude-auto-resume"
readonly DEFAULT_INSTALL_DIR="/usr/local/bin"
readonly WRAPPER_TEMPLATE="templates/global-wrapper.sh"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# ===============================================================================
# UTILITY FUNCTIONS
# ===============================================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Cleanup function for failed installations
cleanup_on_failure() {
    local temp_wrapper="${1:-}"
    local target_file="${2:-}"
    
    log_warning "Installation failed, cleaning up..."
    
    # Clean up temporary files
    if [[ -n "$temp_wrapper" && -f "$temp_wrapper" ]]; then
        rm -f "$temp_wrapper"
        log_info "Removed temporary wrapper: $temp_wrapper"
    fi
    
    # Clean up incomplete target installation
    if [[ -n "$target_file" && -f "$target_file" && ! -x "$target_file" ]]; then
        rm -f "$target_file"
        log_info "Removed incomplete installation: $target_file"
    fi
}

# ===============================================================================
# PLATFORM DETECTION
# ===============================================================================

detect_platform() {
    case "$(uname)" in
        Darwin) echo "macos" ;;
        Linux)  echo "linux" ;;
        *)      echo "unsupported" ;;
    esac
}

get_system_bin_directory() {
    local platform="$(detect_platform)"
    case "$platform" in
        macos|linux) 
            # Check for common bin directories
            for dir in "/usr/local/bin" "/opt/local/bin" "$HOME/.local/bin"; do
                if [[ -d "$dir" ]]; then
                    echo "$dir"
                    return 0
                fi
            done
            echo "/usr/local/bin" # Default fallback
            ;;
        *) 
            log_error "Unsupported platform: $(uname)"
            return 1 
            ;;
    esac
}

# ===============================================================================
# PERMISSION HANDLING
# ===============================================================================

check_install_permissions() {
    local target_dir="${1:-$(get_system_bin_directory)}"
    
    if [[ -w "$target_dir" ]]; then
        log_info "Have write permissions for $target_dir"
        return 0
    else
        log_warning "Installation requires elevated privileges"
        log_info "This will install to: $target_dir"
        log_info "Alternative: Use --target-dir ~/bin for user installation"
        return 1
    fi
}

# Verify PATH accessibility
verify_path_accessibility() {
    local target_dir="$1"
    if [[ ":$PATH:" != *":$target_dir:"* ]]; then
        log_warning "$target_dir is not in PATH"
        log_info "You may need to add it to your shell configuration:"
        log_info "  echo 'export PATH=\"$target_dir:\$PATH\"' >> ~/.bashrc"
        log_info "  echo 'export PATH=\"$target_dir:\$PATH\"' >> ~/.zshrc"
        return 1
    fi
    return 0
}

# ===============================================================================
# INSTALLATION METHODS
# ===============================================================================

# Create the global wrapper script
create_global_wrapper() {
    local installation_dir="$1"
    local target_file="$2"
    
    log_info "Creating global wrapper script..."
    
    cat > "$target_file" << EOF
#!/usr/bin/env bash
# Global wrapper for claude-auto-resume
# Generated by install-global.sh on $(date)

# Set installation directory
export CLAUDE_AUTO_RESUME_HOME="$installation_dir"

# Execute the main script with all arguments
exec "\$CLAUDE_AUTO_RESUME_HOME/src/task-queue.sh" "\$@"
EOF
    
    chmod +x "$target_file"
    log_success "Created wrapper script: $target_file"
}

# Install via symlink method
install_via_symlink() {
    local installation_dir="$1"
    local target_dir="$2"
    local target_file="$target_dir/$SCRIPT_NAME"
    local main_script="$installation_dir/src/task-queue.sh"
    
    log_info "Installing via symlink method..."
    
    # Set up cleanup trap
    trap 'cleanup_on_failure "" "$target_file"' ERR
    
    # Validate source script exists and is executable
    if [[ ! -f "$main_script" ]]; then
        log_error "Main script not found: $main_script"
        return 1
    fi
    
    if [[ ! -x "$main_script" ]]; then
        log_error "Main script is not executable: $main_script"
        return 1
    fi
    
    # Check for existing installation and version
    if [[ -f "$target_file" ]]; then
        validate_version_compatibility
        log_info "Removing existing installation..."
        rm -f "$target_file"
    fi
    
    # Create the wrapper script instead of direct symlink
    # This ensures proper path resolution
    create_global_wrapper "$installation_dir" "$target_file"
    
    # Disable trap on success
    trap - ERR
    
    return 0
}

# Install with sudo if needed
install_with_sudo() {
    local installation_dir="$1"
    local target_dir="$2"
    local target_file="$target_dir/$SCRIPT_NAME"
    
    log_info "Installing with elevated privileges..."
    
    # Create temporary wrapper script
    local temp_wrapper="/tmp/claude-auto-resume-wrapper-$$"
    
    # Set up cleanup trap
    trap 'cleanup_on_failure "$temp_wrapper" "$target_file"' ERR
    
    create_global_wrapper "$installation_dir" "$temp_wrapper"
    
    # Move to target location with sudo
    sudo mv "$temp_wrapper" "$target_file"
    sudo chmod +x "$target_file"
    
    # Disable trap on success
    trap - ERR
    
    log_success "Installed with sudo to $target_file"
}

# Version compatibility check
validate_version_compatibility() {
    local installed_version
    if command -v claude-auto-resume >/dev/null 2>&1; then
        installed_version=$(claude-auto-resume --version 2>/dev/null || echo "unknown")
        log_info "Found existing version: $installed_version"
        # Add version comparison logic here in future releases
        return 0
    fi
    return 0
}

# ===============================================================================
# VALIDATION
# ===============================================================================

validate_installation_env() {
    local installation_dir="$1"
    
    log_info "Validating installation environment..."
    
    # Check if we're in the correct directory
    if [[ ! -f "$installation_dir/CLAUDE.md" ]]; then
        log_error "Not in Claude-Auto-Resume-System directory"
        log_error "Please run from the root of the repository"
        return 1
    fi
    
    # Validate required files exist and are accessible
    local required_files=(
        "$installation_dir/src/task-queue.sh"
        "$installation_dir/config/default.conf"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Required file not found: $file"
            return 1
        fi
        if [[ ! -r "$file" ]]; then
            log_error "Required file not readable: $file"
            return 1
        fi
    done
    
    # Source the installation path utilities if available
    if [[ -f "$installation_dir/src/utils/installation-path.sh" ]]; then
        source "$installation_dir/src/utils/installation-path.sh"
        
        if ! validate_installation "$installation_dir"; then
            log_error "Installation validation failed"
            return 1
        fi
    else
        log_warning "Installation path utilities not found - proceeding without advanced validation"
    fi
    
    log_success "Installation environment validated"
    return 0
}

validate_global_command() {
    local command_name="$SCRIPT_NAME"
    
    log_info "Validating global command installation..."
    
    if command -v "$command_name" >/dev/null 2>&1; then
        local command_path="$(which "$command_name")"
        log_success "Global installation successful"
        log_info "Command location: $command_path"
        
        # Verify PATH accessibility
        local command_dir="$(dirname "$command_path")"
        verify_path_accessibility "$command_dir"
        
        # Test basic functionality with more comprehensive checks
        log_info "Testing basic functionality..."
        
        # Test command execution
        if timeout 10s "$command_name" --help >/dev/null 2>&1; then
            log_success "Command executes successfully"
        else
            log_warning "Command installed but may have execution issues"
        fi
        
        # Test wrapper script integrity
        if [[ -f "$command_path" && -x "$command_path" ]]; then
            log_success "Wrapper script has correct permissions"
        else
            log_error "Wrapper script permissions issue"
            return 1
        fi
        
        return 0
    else
        log_error "Global installation failed - command not found in PATH"
        return 1
    fi
}

# ===============================================================================
# MAIN INSTALLATION FUNCTION
# ===============================================================================

install_global() {
    local installation_dir="${1:-$(pwd)}"
    local target_dir="${2:-$(get_system_bin_directory)}"
    local force="${3:-false}"
    
    log_info "Starting global installation of claude-auto-resume..."
    log_info "Installation directory: $installation_dir"
    log_info "Target directory: $target_dir"
    
    # Validate environment
    if ! validate_installation_env "$installation_dir"; then
        return 1
    fi
    
    # Create target directory if it doesn't exist
    if [[ ! -d "$target_dir" ]]; then
        log_info "Creating target directory: $target_dir"
        if check_install_permissions "$(dirname "$target_dir")"; then
            mkdir -p "$target_dir"
        else
            sudo mkdir -p "$target_dir"
        fi
    fi
    
    # Check for existing installation
    local existing_command="$target_dir/$SCRIPT_NAME"
    if [[ -f "$existing_command" ]] && [[ "$force" != "true" ]]; then
        log_warning "Existing installation found: $existing_command"
        read -p "Overwrite existing installation? [y/N]: " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Installation cancelled by user"
            return 0
        fi
    fi
    
    # Perform installation
    if check_install_permissions "$target_dir"; then
        install_via_symlink "$installation_dir" "$target_dir"
    else
        install_with_sudo "$installation_dir" "$target_dir"
    fi
    
    # Validate installation
    if validate_global_command; then
        log_success "Global installation completed successfully!"
        echo
        echo "You can now use 'claude-auto-resume' from any directory:"
        echo "  claude-auto-resume --help"
        echo "  claude-auto-resume --continuous"
        echo "  claude-auto-resume --add-custom \"My task\""
        echo
        
        # Check PATH and provide guidance if needed
        local target_in_path=true
        if ! verify_path_accessibility "$target_dir"; then
            target_in_path=false
            echo "Note: You may need to restart your terminal or source your shell configuration"
            echo "for the command to be available in new terminal sessions."
        fi
        
        return 0
    else
        log_error "Installation completed but validation failed"
        return 1
    fi
}

# ===============================================================================
# UNINSTALLATION
# ===============================================================================

uninstall_global() {
    local target_dir="${1:-$(get_system_bin_directory)}"
    local target_file="$target_dir/$SCRIPT_NAME"
    
    log_info "Uninstalling global claude-auto-resume..."
    
    if [[ ! -f "$target_file" ]]; then
        log_warning "No global installation found at $target_file"
        return 0
    fi
    
    # Remove the installation
    if [[ -w "$target_dir" ]]; then
        rm -f "$target_file"
        log_success "Removed $target_file"
    else
        sudo rm -f "$target_file"
        log_success "Removed $target_file (with sudo)"
    fi
    
    # Verify removal
    if command -v "$SCRIPT_NAME" >/dev/null 2>&1; then
        log_warning "Command still found in PATH - may be installed elsewhere"
    else
        log_success "Global uninstallation completed successfully"
    fi
}

# ===============================================================================
# COMMAND LINE INTERFACE
# ===============================================================================

show_help() {
    cat << EOF
Claude Auto-Resume Global Installation Script

Usage: $0 [OPTIONS]

Options:
    --install               Install globally (default action)
    --uninstall            Remove global installation
    --target-dir DIR       Install to specific directory (default: /usr/local/bin)
    --force                Overwrite existing installation without prompting
    --validate             Check existing installation
    --help                 Show this help message

Examples:
    $0                     # Install globally
    $0 --install           # Install globally  
    $0 --uninstall         # Remove global installation
    $0 --target-dir ~/bin  # Install to custom directory (user-only)
    $0 --validate          # Check installation status

Notes:
    - Installation to /usr/local/bin requires sudo privileges
    - Use --target-dir ~/bin for user-only installation (no sudo required)
    - Ensure target directory is in your PATH for global access

EOF
}

# ===============================================================================
# MAIN SCRIPT EXECUTION
# ===============================================================================

main() {
    local action="install"
    local target_dir=""
    local force="false"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --install)
                action="install"
                shift
                ;;
            --uninstall)
                action="uninstall"
                shift
                ;;
            --target-dir)
                target_dir="$2"
                shift 2
                ;;
            --force)
                force="true"
                shift
                ;;
            --validate)
                action="validate"
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Set default target directory if not specified
    if [[ -z "$target_dir" ]]; then
        target_dir="$(get_system_bin_directory)"
    fi
    
    # Execute requested action
    case "$action" in
        install)
            install_global "$(pwd)" "$target_dir" "$force"
            ;;
        uninstall)
            uninstall_global "$target_dir"
            ;;
        validate)
            validate_global_command
            ;;
        *)
            log_error "Unknown action: $action"
            exit 1
            ;;
    esac
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi